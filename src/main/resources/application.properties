# DB Replication
# 1개의 Master DB와 여러개의 Slave DB로 나눠 동일한 데이터를 가지고 있게한 후
# SELECT( R ) 요청은 Master DB의 부하를 막기 위해 Slave DB에서만 담당하게 하고
# INSERT, UPDATE, DELETE ( CUD ) 요청은 Master DB에서 담당하게 하며
# CUD를 처리한 후 Slave DB에 데이터를 동기화 시킨다.
# @Transactional(readOnly=true)을 붙여 Slave DB로 보내는식으로 처리

# jdbc:mysql:replication://master1,slave1,slave2/test
# jdbc:mysql:sequential://master1,master2/test
# jdbc:mysql:sequential://master1,master2/test

server.port=9000

# JDBC Connection URL for the DataBase
# &enabledTLSProtocols=TLSv1.3
#spring.datasoure.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.driver-class-name=${DB_DRIVER}
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# set log
logging.config=classpath:log4j2.xml

logging.level.jdbc=off
logging.level.jdbc.sqlonly=off
logging.level.jdbc.sqltiming=info
logging.level.jdbc.resultsettable=off
logging.level.jdbc.audit=off
logging.level.jdbc.resultset=off
logging.level.jdbc.connection=off

logging.level.org.springframework.security=${LOGGING_LEVEL_SECURITY}

# Spring Security Password Encoder / Error
# Relying upon circular references is discouraged and they are prohibited by default.
spring.main.allow-circular-references=true

# html 설정
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# OAuth2 Registration 영역 - Google
spring.security.oauth2.client.registration.google.client-id=${OAUTH2_REGISTRATION_GOOGLE_ID}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH2_REGISTRATION_GOOGLE_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_REGISTRATION_GOOGLE_REDIRECT}
spring.security.oauth2.client.registration.google.scope=${OAUTH2_REGISTRATION_GOOGLE_SCOPE}

# OAuth2 Registration 영역 - GitHub
spring.security.oauth2.client.registration.github.client-id=${OAUTH2_REGISTRATION_GITHUB_ID}
spring.security.oauth2.client.registration.github.client-secret=${OAUTH2_REGISTRATION_GITHUB_SECRET}
spring.security.oauth2.client.registration.github.redirect-uri=${OAUTH2_REGISTRATION_GITHUB_REDIRECT}
spring.security.oauth2.client.registration.github.scope=${OAUTH2_REGISTRATION_GITHUB_SCOPE}

# OAuth2 Registration 영역 - Naver
spring.security.oauth2.client.registration.naver.client-id=${OAUTH2_REGISTRATION_NAVER_ID}
spring.security.oauth2.client.registration.naver.client-secret=${OAUTH2_REGISTRATION_NAVER_SECRET}
spring.security.oauth2.client.registration.naver.authorization-grant-type=${OAUTH2_REGISTRATION_NAVER_TYPE}
spring.security.oauth2.client.registration.naver.client-authentication-method=${OAUTH2_REGISTRATION_NAVER_METHOD}
spring.security.oauth2.client.registration.naver.redirect-uri=${OAUTH2_REGISTRATION_NAVER_REDIRECT}
spring.security.oauth2.client.registration.naver.scope=${OAUTH2_REGISTRATION_NAVER_SCOPE}

# OAuth2 Registration 영역 - Kakao
spring.security.oauth2.client.registration.kakao.client-id=${OAUTH2_REGISTRATION_KAKAO_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${OAUTH2_REGISTRATION_KAKAO_SECRET}
spring.security.oauth2.client.registration.kakao.authorization-grant-type=${OAUTH2_REGISTRATION_KAKAO_TYPE}
spring.security.oauth2.client.registration.kakao.client-authentication-method=${OAUTH2_REGISTRATION_KAKAO_METHOD}
spring.security.oauth2.client.registration.kakao.redirect-uri=${OAUTH2_REGISTRATION_KAKAO_REDIRECT}
spring.security.oauth2.client.registration.kakao.scope=${OAUTH2_REGISTRATION_KAKAO_SCOPE}

# OAuth2 Provider 영역 - Naver
spring.security.oauth2.client.provider.naver.authorizationUri=${OAUTH2_PROVIDER_NAVER_AUTH-URI}
spring.security.oauth2.client.provider.naver.tokenUri=${OAUTH2_PROVIDER_NAVER_TOKEN-URI}
spring.security.oauth2.client.provider.naver.userInfoUri=${OAUTH2_PROVIDER_NAVER_USER-INFO-URI}
spring.security.oauth2.client.provider.naver.userNameAttribute=${OAUTH2_PROVIDER_NAVER_USER-NAME-ATTRIBUTE}

# OAuth2 Provider 영역 - Kakao
spring.security.oauth2.client.provider.kakao.authorizationUri=${OAUTH2_PROVIDER_KAKAO_AUTH-URI}
spring.security.oauth2.client.provider.kakao.tokenUri=${OAUTH2_PROVIDER_KAKAO_TOKEN-URI}
spring.security.oauth2.client.provider.kakao.userInfoUri=${OAUTH2_PROVIDER_KAKAO_USER-INFO-URI}
spring.security.oauth2.client.provider.kakao.userNameAttribute=${OAUTH2_PROVIDER_KAKAO_USER-NAME-ATTRIBUTE}