# DB Replication
# 1\uAC1C\uC758 Master DB\uC640 \uC5EC\uB7EC\uAC1C\uC758 Slave DB\uB85C \uB098\uB220 \uB3D9\uC77C\uD55C \uB370\uC774\uD130\uB97C \uAC00\uC9C0\uACE0 \uC788\uAC8C\uD55C \uD6C4
# SELECT( R ) \uC694\uCCAD\uC740 Master DB\uC758 \uBD80\uD558\uB97C \uB9C9\uAE30 \uC704\uD574 Slave DB\uC5D0\uC11C\uB9CC \uB2F4\uB2F9\uD558\uAC8C \uD558\uACE0
# INSERT, UPDATE, DELETE ( CUD ) \uC694\uCCAD\uC740 Master DB\uC5D0\uC11C \uB2F4\uB2F9\uD558\uAC8C \uD558\uBA70
# CUD\uB97C \uCC98\uB9AC\uD55C \uD6C4 Slave DB\uC5D0 \uB370\uC774\uD130\uB97C \uB3D9\uAE30\uD654 \uC2DC\uD0A8\uB2E4.
# @Transactional(readOnly=true)\uC744 \uBD99\uC5EC Slave DB\uB85C \uBCF4\uB0B4\uB294\uC2DD\uC73C\uB85C \uCC98\uB9AC

# jdbc:mysql:replication://master1,slave1,slave2/test
# jdbc:mysql:sequential://master1,master2/test
# jdbc:mysql:sequential://master1,master2/test

server.port=9000

# JDBC Connection URL for the DataBase
# &enabledTLSProtocols=TLSv1.3
#spring.datasoure.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.driver-class-name=${DB_DRIVER}
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# set log
logging.config=classpath:log4j2.xml

logging.level.jdbc=off
logging.level.jdbc.sqlonly=off
logging.level.jdbc.sqltiming=info
logging.level.jdbc.resultsettable=off
logging.level.jdbc.audit=off
logging.level.jdbc.resultset=off
logging.level.jdbc.connection=off

logging.level.org.springframework.security=${LOGGING_LEVEL_SECURITY}

# Redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}

# Spring Security Password Encoder / Error
# Relying upon circular references is discouraged and they are prohibited by default.
spring.main.allow-circular-references=true

# html \uC124\uC815
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html


# \uC778\uC99D Header
auth.jwt.header=${AUTH_HEADER}
# \uC778\uC99D Key
auth.jwt.key=${AUTH_KEY}

# JWT \uD1A0\uD070 \uC11C\uBA85\uACFC \uC554\uD638\uD654\uB97C( JWE ) \uC704\uD574\uC11C \uC0AC\uC6A9
# JWT \uBA85\uCE6D
auth.jwt.name=${JWT_NAME}
# JWT \uBC1C\uAE09\uC790
auth.jwt.issuer=${JWT_ISSUER}
# JWT \uB300\uC0C1\uC790
auth.jwt.audience=${JWT_AUDIENCE}
# JWT Refresh \uBC1C\uAE09\uC790
auth.jwt.refresh.issuer=${JWT_REFRESH_ISSUER}
# JWT Refresh \uB300\uC0C1\uC790
auth.jwt.refresh.audience=${JWT_REFRESH_AUDIENCE}
# JWT Domain
auth.jwt.domain=${JWT_DOMAIN}
# JWT Path
auth.jwt.path=${JWT_PATH}
# JWT \uB9CC\uB8CC\uC77C
auth.jwt.expired=${JWT_EXPIRED}
# JWT \uC11C\uBA85 \uC554\uD638\uD654
auth.jwt.encrypt.sign=${JWT_ENCRYPT_SIGN}
# JWT \uC804\uCCB4 \uC554\uD638\uD654
auth.jwt.encrypt.token=${JWT_ENCRYPT_TOKEN}
# JWT Refresh Token \uC11C\uBA85 \uC554\uD638\uD654
auth.jwt.encrypt.refresh.sign=${JWT_ENCRYPT_REFRESH_SIGN}
# JWT Refresh Token \uC804\uCCB4 \uC554\uD638\uD654
auth.jwt.encrypt.refresh.token=${JWT_ENCRYPT_REFRESH_TOKEN}

# CSRF \uAD00\uB828 \uC124\uC815
auth.csrf.name=${CSRF_COOKIE}
# CSRF \uAD00\uB828 \uC124\uC815
auth.csrf.parameter=${CSRF_PARAMETER}
# CSRF \uAD00\uB828 \uC124\uC815
auth.csrf.header=${CSRF_HEADER}

# \uC778\uC99D\uC11C\uBC84
server.url.auth=${SERVER_URL_AUTH}
# JTI\uAC12 \uD638\uCD9C
server.url.jti=${SERVER_URL_JTI}
# \uBA54\uC778\uD398\uC774\uC9C0 \uC11C\uBC84
#server.url.home=${SERVER_URL_HOME}
server.url.home=http://localhost:9000/home
# \uB85C\uADF8\uC778\uC11C\uBC84
server.url.login=${SERVER_URL_LOGIN}
# \uC2E4\uC81C \uB85C\uADF8\uC544\uC6C3\uC774 \uB3D9\uC791\uD558\uB294 \uACBD\uB85C
server.url.logout=${SERVER_URL_LOGOUT}
# \uACF5\uC778 IP \uD655\uC778\uD558\uB294 API URL
server.url.api.origin-ip=${SERVER_URL_ORIGIN-IP}

# OAuth2 Registration \uC601\uC5ED - Google
spring.security.oauth2.client.registration.google.client-id=${OAUTH2_REGISTRATION_GOOGLE_ID}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH2_REGISTRATION_GOOGLE_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_REGISTRATION_GOOGLE_REDIRECT}
spring.security.oauth2.client.registration.google.scope=${OAUTH2_REGISTRATION_GOOGLE_SCOPE}

# OAuth2 Registration \uC601\uC5ED - GitHub
spring.security.oauth2.client.registration.github.client-id=${OAUTH2_REGISTRATION_GITHUB_ID}
spring.security.oauth2.client.registration.github.client-secret=${OAUTH2_REGISTRATION_GITHUB_SECRET}
spring.security.oauth2.client.registration.github.redirect-uri=${OAUTH2_REGISTRATION_GITHUB_REDIRECT}
spring.security.oauth2.client.registration.github.scope=${OAUTH2_REGISTRATION_GITHUB_SCOPE}

# OAuth2 Registration \uC601\uC5ED - Naver
spring.security.oauth2.client.registration.naver.client-id=${OAUTH2_REGISTRATION_NAVER_ID}
spring.security.oauth2.client.registration.naver.client-secret=${OAUTH2_REGISTRATION_NAVER_SECRET}
spring.security.oauth2.client.registration.naver.authorization-grant-type=${OAUTH2_REGISTRATION_NAVER_TYPE}
spring.security.oauth2.client.registration.naver.client-authentication-method=${OAUTH2_REGISTRATION_NAVER_METHOD}
spring.security.oauth2.client.registration.naver.redirect-uri=${OAUTH2_REGISTRATION_NAVER_REDIRECT}
spring.security.oauth2.client.registration.naver.scope=${OAUTH2_REGISTRATION_NAVER_SCOPE}

# OAuth2 Registration \uC601\uC5ED - Kakao
spring.security.oauth2.client.registration.kakao.client-id=${OAUTH2_REGISTRATION_KAKAO_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${OAUTH2_REGISTRATION_KAKAO_SECRET}
spring.security.oauth2.client.registration.kakao.authorization-grant-type=${OAUTH2_REGISTRATION_KAKAO_TYPE}
spring.security.oauth2.client.registration.kakao.client-authentication-method=${OAUTH2_REGISTRATION_KAKAO_METHOD}
spring.security.oauth2.client.registration.kakao.redirect-uri=${OAUTH2_REGISTRATION_KAKAO_REDIRECT}
spring.security.oauth2.client.registration.kakao.scope=${OAUTH2_REGISTRATION_KAKAO_SCOPE}

# OAuth2 Provider \uC601\uC5ED - Naver
spring.security.oauth2.client.provider.naver.authorizationUri=${OAUTH2_PROVIDER_NAVER_AUTH-URI}
spring.security.oauth2.client.provider.naver.tokenUri=${OAUTH2_PROVIDER_NAVER_TOKEN-URI}
spring.security.oauth2.client.provider.naver.userInfoUri=${OAUTH2_PROVIDER_NAVER_USER-INFO-URI}
spring.security.oauth2.client.provider.naver.userNameAttribute=${OAUTH2_PROVIDER_NAVER_USER-NAME-ATTRIBUTE}

# OAuth2 Provider \uC601\uC5ED - Kakao
spring.security.oauth2.client.provider.kakao.authorizationUri=${OAUTH2_PROVIDER_KAKAO_AUTH-URI}
spring.security.oauth2.client.provider.kakao.tokenUri=${OAUTH2_PROVIDER_KAKAO_TOKEN-URI}
spring.security.oauth2.client.provider.kakao.userInfoUri=${OAUTH2_PROVIDER_KAKAO_USER-INFO-URI}
spring.security.oauth2.client.provider.kakao.userNameAttribute=${OAUTH2_PROVIDER_KAKAO_USER-NAME-ATTRIBUTE}